https://github.com/LeoFu9487/push_swap_tester
https://github.com/SimonCROS/push_swap_tester
https://github.com/gemartin99/Push-Swap-Tester

Для оценки проекта **push_swap**, который представляет собой алгоритм сортировки с использованием двух стеков и множества операций, важно протестировать программу на корректность выполнения, обработку ошибок, производительность и утечки памяти. Ниже приведен полный набор тестов, который можно использовать для проверки.

### 1. **Проверка на утечки памяти**

#### Тест 1: Проверка отсутствия утечек памяти
- **Цель**: Убедиться, что программа корректно освобождает всю выделенную память.
- **Тесты**:
  - Используйте утилиты типа `valgrind` или `leaks` для проверки наличия утечек памяти при запуске программы с разными параметрами.
  - Запустите push_swap с небольшими и большими наборами данных (например, 3, 5, 100 и 500 элементов) и убедитесь, что программа завершает работу без утечек памяти.
  - Программа не должна завершаться с ошибками (например, `segmentation fault`, `bus error` и т.д.).

#### Тест 2: Отсутствие ошибок выделения памяти
- **Цель**: Убедиться, что программа не допускает ошибок выделения памяти.
- **Тест**: Запустите push_swap с большими наборами данных (например, 1000, 5000 чисел) и проверьте, что программа корректно работает без сбоев и освобождает всю память.

### 2. **Управление ошибками**

#### Тест 3: Некорректные параметры
- **Цель**: Программа должна корректно обрабатывать ошибки ввода.
- **Тесты**:
  - Запустите программу с нечисловыми параметрами, например `./push_swap a b c`. Программа должна вывести "Ошибка".
  - Запустите программу с дублирующимися параметрами, например `./push_swap 3 1 2 3`. Программа должна вывести "Ошибка".
  - Запустите программу с числами, превышающими максимальные значения для типа `int`, например `./push_swap 2147483648 1 2`. Программа должна вывести "Ошибка".
  - Запустите программу без параметров, например `./push_swap`. Программа не должна ничего выводить и должна завершиться корректно.

### 3. **Тест идентичности (отсортированные списки)**

#### Тест 4: Проверка поведения программы на отсортированных списках
- **Цель**: Программа не должна выполнять лишние операции на уже отсортированных списках.
- **Тесты**:
  - Запустите `./push_swap 42`. Программа не должна ничего выводить.
  - Запустите `./push_swap 2 3`. Программа не должна ничего выводить.
  - Запустите `./push_swap 0 1 2 3`. Программа не должна ничего выводить.
  - Запустите `./push_swap 0 1 2 3 4 5 6 7 8 9`. Программа не должна ничего выводить.
  - Запустите программу с уже отсортированным списком случайных значений, например `./push_swap '0 1 2 3 4'`. Программа не должна ничего выводить.

### 4. **Простая версия**

#### Тест 5: Проверка работы с небольшими наборами данных (до 3 чисел)
- **Цель**: Убедиться, что программа корректно работает с малыми наборами данных и генерирует минимальное количество операций.
- **Тесты**:
  - Запустите `$>ARG="2 1 0"; ./push_swap $ARG | ./checker_OS $ARG`. Программа `checker_OS` должна вывести "OK", а количество операций из `push_swap` должно быть 2 или 3.
  - Запустите программу с другими перестановками, например с 3 случайными значениями, и проверьте, что результат программы также верен и количество инструкций минимально.

#### Тест 6: Проверка работы с небольшими наборами данных (до 5 чисел)
- **Цель**: Убедиться, что программа корректно работает с 5 числами и выполняет сортировку с минимальным количеством операций.
- **Тесты**:
  - Запустите `$>ARG="1 5 2 4 3"; ./push_swap $ARG | ./checker_OS $ARG`. Программа `checker_OS` должна вывести "OK", а количество инструкций не должно превышать 12.
  - Повторите тест с разными 5 случайными значениями и проверьте результат несколько раз, чтобы убедиться в корректности программы.

### 5. **Средняя версия**

#### Тест 7: Проверка работы с набором из 100 чисел
- **Цель**: Проверить производительность программы на более крупном наборе данных и оценить количество операций.
- **Тест**:
  - Запустите `$>ARG="<100 случайных значений>"; ./push_swap $ARG | ./checker_OS $ARG`. Программа `checker_OS` должна вывести "OK", а количество операций должно быть в следующих пределах:
    - Менее 700 операций — 5 баллов.
    - Менее 900 операций — 4 балла.
    - Менее 1100 операций — 3 балла.
    - Менее 1300 операций — 2 балла.
    - Менее 1500 операций — 1 балл.
  Повторите тест с несколькими разными перестановками для проверки стабильности.

### 6. **Улучшенная версия (большие наборы данных)**

#### Тест 8: Проверка работы с набором из 500 чисел
- **Цель**: Оценить производительность программы на большом наборе данных и количество операций.
- **Тест**:
  - Запустите `$>ARG="<500 случайных значений>"; ./push_swap $ARG | ./checker_OS $ARG`. Программа `checker_OS` должна вывести "OK", а количество операций должно быть:
    - Менее 5500 операций — 5 баллов.
    - Менее 7000 операций — 4 балла.
    - Менее 8500 операций — 3 балла.
    - Менее 10000 операций — 2 балла.
    - Менее 11500 операций — 1 балл.
  Также, как и в предыдущем тесте, повторите несколько раз с разными перестановками значений.

---

### 7. **Общие дополнительные тесты**

#### Тест 9: Проверка корректного использования стека
- **Цель**: Убедиться, что программа использует стековые операции (sa, sb, ra, rb и т.д.) корректно.
- **Тест**: Проанализируйте вывод `push_swap` для небольших наборов данных и убедитесь, что использованы корректные операции.

#### Тест 10: Наборы данных с разными характеристиками
- **Цель**: Проверить, как программа справляется с различными сценариями ввода данных.
- **Тесты**:
  - Запустите программу с повторяющимися числами (например, `./push_swap 1 1 1`), она должна вывести "Ошибка".
  - Проверьте, как программа справляется с набором данных, в котором все числа одинаковые (например, `./push_swap 42 42 42`).
  - Проверьте поведение программы с набором данных, отсортированным в обратном порядке (например, `./push_swap 3 2 1`).

---

Этот список тестов позволяет полноценно протестировать все важные аспекты проекта **push_swap**: управление памятью, обработку ошибок, производительность на различных наборах данных и корректность выполнения операций.
